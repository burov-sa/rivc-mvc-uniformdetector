import cv2
import streamlit as st
from streamlit_webrtc import VideoTransformerBase, webrtc_streamer
import yaml
import os
import numpy as np
import subprocess
import pandas as pd

@st.cache_resource()
def get_model(modeltype):
    modelpath='./models'
    if modeltype in model_names:
        from ultralytics import YOLO
        modelpath = os.path.join(modelpath, model_files[model_names.index(modeltype)])
        model = YOLO(modelpath)  # –∑–∞–≥—Ä—É–∑–∫–∞ –≤–µ—Å–æ–≤ –æ–±—É—á–µ–Ω–Ω–æ–π –Ω–µ–π—Ä–æ–Ω–Ω–æ–π —Å–µ—Ç–∏ 
        print(f"–ú–æ–¥–µ–ª—å '{modeltype}' —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–∞ ")
    else:
        from ultralytics import YOLO
        model = YOLO("yolov8n.pt")
    return model

#–ø–æ–ª—É—á–µ–Ω–∏–µ —Ñ—Ä–µ–π–º–∞ –∏–∑ –ø–æ—Ç–æ–∫–æ–≤–æ–≥–æ –≤–∏–¥–µ–æ —Å –∫–∞–º–µ—Ä—ã, –µ–≥–æ –∞–Ω–∞–ª–∏–∑ –∏ —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏—è
class VideoTransformer(VideoTransformerBase):
    def __init__(self):
        self.model = model
        self.class_names = class_names
        self.colors = colors
        if len(self.class_names)==0: self.class_names=model.names
    def get_preds(self, frame : np.ndarray) -> np.ndarray:
        return (self.model(frame)[0])
    def transform(self, frame):
        frame = frame.to_ndarray(format="bgr24")
        frame = cv2.cvtColor(frame, cv2.COLOR_BGR2RGB)
        results = self.get_preds(frame)
        results_list_g = [0] * len(self.class_names) #—Å–ø–∏—Å–æ–∫ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–Ω—ã—Ö –∫–ª–∞—Å—Å–æ–≤
        for result in results.boxes.data.tolist():
            x1, y1, x2, y2, score, class_id = result
            if score >= threshold:
                results_list_g[int(class_id)] += 1 
                if len(self.colors)==0: color = (0,255,0)
                else: color = tuple(self.colors[int(class_id)])              
                cv2.rectangle(frame, (int(x1), int(y1)), (int(x2), int(y2)), color, 4)
                cv2.putText(frame, class_names[int(class_id)]+"-"+str(int(score*100))+"%", (int(x1), int(y1 - 10)),
                            cv2.FONT_HERSHEY_COMPLEX, 1.4, color, 3, cv2.LINE_AA)
        return cv2.cvtColor(frame, cv2.COLOR_RGB2BGR)

# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ BytesIO –Ω–∞ –¥–∏—Å–∫
def write_bytesio_to_file(filename, bytesio):
    """
    –ó–∞–ø–∏—Å—ã–≤–∞–µ—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ BytesIO –≤ —Ñ–∞–π–ª.
    –°–æ–∑–¥–∞–µ—Ç —Ñ–∞–π–ª –∏–ª–∏ –ø–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç —Ñ–∞–π–ª, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. 
    """
    with open(filename, "wb") as outfile:
        # –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ—Ç–æ–∫–∞ BytesIO –≤ –≤—ã—Ö–æ–¥–Ω–æ–π —Ñ–∞–π–ª
        outfile.write(bytesio.getbuffer())
#–æ—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
def rm_temp():
    for filename in os.listdir(os.path.join('.','temp')):
        os.remove(os.path.join('./temp',filename))

@st.cache_data()
#–∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è –≤ —Å–æ–æ–≤—Ç–µ—Ç—Å—Ç–≤–∏–∏ —Å –∑–∞–¥–∞–Ω–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
def classification(results, rows):
    count = 1 #—Å—á—ë—Ç—á–∏–∫ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –Ω–∞—Ä—É—à–µ–Ω–∏–π
    df = pd.DataFrame(columns=["–Ω–∞–ª–∏—á–∏–µ","–Ω–∞—Ä—É—à–µ–Ω–∏—è"], index=list(set(rows))).fillna("")
    df_match = pd.read_csv("./uniformmatch.csv", sep=",", index_col=0).fillna(0)
    for classname in results.keys():
        if results[classname]>0:
            for col in df_match.columns:
                #–µ—Å–ª–∏ –∫–ª–∞—Å—Å–∞ –Ω–µ—Ç –≤ —Å–ø–∏—Å–∫–µ –∫–ª–∞—Å—Å–æ–≤, –æ–Ω –ª–∏—à–Ω–∏–π
                if (df_match.loc[classname, col]>0) and (df_match.loc['min', col]>0) and (col not in df.index):
                    if classname not in list(df['–Ω–∞—Ä—É—à–µ–Ω–∏—è']):
                        df.loc[f'–Ω–∞—Ä—É—à–µ–Ω–∏–µ_{count}'] = ["", classname]
                        count+=1
                #–µ—Å–ª–∏ –∫–ª–∞—Å—Å –µ—Å—Ç—å –≤ —Å–ø–∏—Å–∫–µ, –æ–Ω –Ω–µ —è–≤–ª—è–µ—Ç—Å—Å—è –Ω–∞—Ä—É—à–µ–Ω–∏–µ–º, –∫–æ–ª–∏—á—Å—Ç–≤–æ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç
                elif (df_match.loc[classname, col]==1) and (col in df.index):
                    if (df_match.loc['min', col] <= results[classname] <= (df_match.loc['max', col])):
                        df.loc[col,'–Ω–∞–ª–∏—á–∏–µ'] = '+'
                    else:                                         
                        df.loc[col,'–Ω–∞—Ä—É—à–µ–Ω–∏—è'] =  df.loc[col,'–Ω–∞—Ä—É—à–µ–Ω–∏—è'] + "–Ω–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞\n"
                #–µ—Å–ª–∏ –∫–ª–∞—Å—Å –µ—Å—Ç—å –≤ —Å–ø–∏—Å–∫–µ –∏ –æ–Ω —è–≤–ª—è–µ—Ç—Å—è –Ω–∞—Ä—É—à–µ–Ω–∏–µ–º
                elif (df_match.loc[classname, col]==2) and (col in df.index):
                    df.loc[col,'–Ω–∞–ª–∏—á–∏–µ'] = '+'
                    df.loc[col,'–Ω–∞—Ä—É—à–µ–Ω–∏—è'] = df.loc[col,'–Ω–∞—Ä—É—à–µ–Ω–∏—è'] + "–Ω–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º\n"
    for row in rows:
        if df.loc[row,'–Ω–∞–ª–∏—á–∏–µ'] == "": df.loc[row,"–Ω–∞—Ä—É—à–µ–Ω–∏—è"] = "–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"
    return df

class IndentDumper(yaml.Dumper):
    def increase_indent(self, flow=False, indentless=False):
        return super(IndentDumper, self).increase_indent(flow, False)

    """  
    –û—Å–Ω–æ–≤–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ –≤ main
    results_list - —Å–ø–∏—Å–æ–∫ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏ –¥–ª—è –≤—Å–µ—Ö –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π/–≤–∏–¥–µ–æ, –∏–Ω–¥–µ–∫—Å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç id –∫–ª–∞—Å—Å–∞ 
    result_list - —Å–ø–∏—Å–æ–∫ —Å —Ä–µ–∑—É–ª—å—Ç–∞–º–∏ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏ –¥–ª—è –æ–¥–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è/–≤–∏–¥–µ–æ, –∏–Ω–¥–µ–∫—Å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç id –∫–ª–∞—Å—Å–∞, 
                    –∑–Ω–∞—á–µ–Ω–∏–µ —Ä–∞–≤–Ω–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–º—É –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –æ–±—ä–∫—Ç–æ–≤ –¥–∞–Ω–Ω–æ–≥–æ –∫–ª–∞—Å—Å–∞ –Ω–∞ –∫–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä—É–µ–º–æ–º –æ–±—Ä–∞–∑–µ
    results_dict - —Å–ª–æ–≤–∞—Ä—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏: key - –∏–º—è –∫–ª–∞—Å—Å–∞, value - –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–≤ –∫–ª–∞—Å—Å–∞ 
    results_dict_g - –≥–ª–æ–±–∞–ª—å–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏: key - –∏–º—è –∫–ª–∞—Å—Å–∞, value - –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–≤ –∫–ª–∞—Å—Å–∞ 
                        –∏—Å–æ–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ –∫–ª–∞—Å—Å–µ Video Transformer –¥–ª—è –ø–æ—Ç–æ–∫–æ–≤–æ–≥–æ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –≤–∏–¥–µ–æ
    —Ålass_names - —Å–ª–æ–≤–∞—Ä—å names —Ü–≤–µ—Ç–æ–≤ –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫–æ–≤, –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞—é—â–∏—Ö –∫–ª–∞—Å—Å—ã {id_class: (B,G,R)} –∏–∑ —Ñ–∞–π–ª–∞ config.yaml 
    —Åolors - —Å–ª–æ–≤–∞—Ä—å color —Ü–≤–µ—Ç–æ–≤ –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫–æ–≤, –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞—é—â–∏—Ö –∫–ª–∞—Å—Å—ã {id_class: (B,G,R)} –∏–∑ —Ñ–∞–π–ª–∞ config.yaml
    model_names - —Å–ø–∏—Å–æ–∫ model_names –∏–∑ —Ñ–∞–π–ª–∞ config.yaml, —Å–æ–¥–µ—Ä–∂–∞—â–∏—Ö –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ç–æ—Ä–æ–≤, –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º—ã—Ö –Ω–∞ UI
    model_files - —Å–ø–∏—Å–æ–∫ model_files –∏–∑ —Ñ–∞–π–ª–∞ config.yaml, —Å–æ–¥–µ—Ä–∂–∞—â–∏—Ö –∏–º–µ–Ω–∞ —Ñ–∞–π–ª–æ–≤ –º–æ–¥–µ–ª–µ–π –≤ –ø–∞–ø–∫–µ models
    uniform - c–ª–æ–≤–∞—Ä—å uniform –æ–ø—Ä–µ–¥–µ–ª–µ—è—é—â–∏–π —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –ø—Ä–æ–≤–µ—Ä—è–µ–º–æ–≥–æ –∫–æ–º–ø–ª–µ–∫—Ç–∞ –æ–¥–µ–∂–¥—ã {–Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ_–∫–æ–º–ø–ª–µ–∫—Ç–∞: [–≥–æ–ª–æ–≤–Ω–æ–π —É–±—Ä–æ, —Ç—É—Ñ–ª–∏, .....]} –∏–∑ —Ñ–∞–π–ª–∞ config.yaml 
    """
def main():
    st.set_page_config(page_title="–í–Ω–µ—à–Ω–∏–π –≤–∏–¥")
    st.title('–°–µ—Ä–≤–∏—Å –æ—Ü–µ–Ω–∫–∏ –≤–Ω–µ—à–Ω–µ–≥–æ –≤–∏–¥–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤',)
    rm_temp()
    global class_names, colors, model_names, model_files, uniform #—Å–ª–æ–≤–∞—Ä–∏ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è –∫–ª–∞—Å—Å–æ–≤ –∏ —Ü–≤–µ—Ç–æ–≤ –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫–æ–≤ –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞—â–∏—Ö –ø—Ä–µ–¥–º–µ—Ç—ã –ø–æ –∏—Ö id
    try:
        with open('config.yaml') as fh:
            read_data = yaml.load(fh, Loader=yaml.FullLoader)
            path_dataset = read_data['path']
            path_imtrain = read_data['train']
            path_imval = read_data['val']
            class_names = read_data['names']
            colors = read_data['colors']
            model_names = read_data['model_names']
            model_files = read_data['model_files']
            uniform = read_data['uniform']
            uniform_consist=read_data['uniform_consist']
            print('–§–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ config.yaml —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω')
    except:
        print('–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç config.yaml –∏–ª–∏ –¥–∞–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∞–Ω—ã –≤ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ')
        path_dataset = {'path': '/home/bsa/Projects/UniformDetect/data'}
        path_imtrain = {'train': 'images/train'}
        path_imval = {'val': 'images/train'}
        class_names = {}
        colors={}
        model_names=[]
        model_files=[]
        uniform={}
        uniform_consist=[]
    
    st.sidebar.image("headimage.jpg")
    detect_mode = st.sidebar.radio("–¢–∏–ø –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö",
                                   
                                    ('–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ', '–í–∏–¥–µ–æ–∑–∞–ø–∏—Å—å', '–ö–∞–º–µ—Ä–∞'), index=0)
    
    type_uniform = st.sidebar.selectbox('–ü—Ä–æ–≤–µ—Ä—è–µ–º—ã–π –∫–æ–º–ø–ª–µ–∫—Ç –æ–¥–µ–∂–¥—ã', tuple(list(uniform.keys())) , index=0)
    #—É–¥–∞–ª–µ–Ω–∏–µ –∏–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –∫–æ–º–ø–ª–µ–∫—Ç–∞ —Ñ–æ—Ä–º—ã
    tab3, tab4, tab5 = st.sidebar.tabs(["üìã", "üìù","‚ùå"])
    new_uniform = tab4.multiselect('–°–æ—Å—Ç–∞–≤ –∫–æ–º–ø–ª–µ–∫—Ç–∞', list(uniform_consist),default=uniform[type_uniform])
    new_name = tab4.text_input('–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ', value=type_uniform)
    if tab4.button('–°–æ—Ö—Ä–∞–Ω–∏—Ç—å'):
        if new_name != type_uniform: uniform[new_name] = new_uniform 
        else: uniform[type_uniform] = new_uniform 
        dump_all = [{'path': path_dataset}, {'train':path_imtrain}, {'val':path_imval}, {'names':class_names}, {'colors':colors},
                    {'model_names':model_names}, {'model_files':model_files}, {'uniform':uniform}, {'uniform_consist':uniform_consist}]
        try:
            with open('config.yaml', 'w') as fw:
                yaml.dump_all(dump_all, fw, sort_keys=False, encoding='UTF-8', allow_unicode=True, Dumper=IndentDumper,\
                            explicit_end=False, explicit_start=False)
            fw = open("config.yaml", "rt") 
            data = fw.read() 
            data = data.replace('---', '')
            data = data.replace('...', '')
            fw.close() 
            fw = open("config.yaml", "wt") 
            fw.write(data)
            fw.close()
            print('–§–∞–π–ª config.yaml —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª—ë–Ω' )
        except:
             print('–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ config.yaml')
    if tab5.button('–£–¥–∞–ª–∏—Ç—å –∫–æ–º–ø–ª–µ–∫—Ç –æ–¥–µ–∂–¥—ã'):
        del uniform[type_uniform]
        dump_all = [{'path': path_dataset}, {'train':path_imtrain}, {'val':path_imval}, {'names':class_names}, {'colors':colors},
                    {'model_names':model_names}, {'model_files':model_files}, {'uniform':uniform}, {'uniform_consist':uniform_consist}]
        try:
            with open('config.yaml', 'w') as fw:
                yaml.dump_all(dump_all, fw, sort_keys=False, encoding='UTF-8', allow_unicode=True, Dumper=IndentDumper,\
                            explicit_end=False, explicit_start=False)
            fw = open("config.yaml", "rt") 
            data = fw.read() 
            data = data.replace('---', '')
            data = data.replace('...', '')
            fw.close() 
            fw = open("config.yaml", "wt") 
            fw.write(data)
            fw.close()
            print('–§–∞–π–ª config.yaml —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª—ë–Ω' )
        except:
             print('–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ config.yaml')       
             
    global threshold
    threshold = 0.01 * st.sidebar.slider("–ü–æ—Ä–æ–≥ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è", min_value=0.0, max_value = 100.0, value=10.0) #–ø–æ—Ä–æ–≥ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è
    
    global model 
    if len(model_names)==0: 
        st.write('–ê–ª–≥–æ—Ä–∏—Ç–º—ã —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∞–ª–≥–æ—Ä–∏—Ç–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é')
        model_type = "default"
    else:
        model_type = st.sidebar.selectbox('–ê–ª–≥–æ—Ä–∏—Ç–º —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è', tuple(model_names), index=0)

    model = get_model(model_type)
    if len(class_names)==0: class_names = model.names #–µ—Å–ª–∏ –Ω–µ –∑–∞–¥–∞–Ω—ã –∫–ª–∞—Å—Å—ã –≤ —Ñ–∞–π–ª–µ config.yaml
    
    global result_list_g
    results_list_g = [0] * len(class_names) #—Å–ø–∏—Å–æ–∫ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–Ω—ã—Ö –∫–ª–∞—Å—Å–æ–≤
    if detect_mode == '–ö–∞–º–µ—Ä–∞':
        if webrtc_streamer(key="–î–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤—Å—Ç–∞–Ω—å—Ç–µ –≤ –æ–±—ä–µ–∫—Ç–∏–≤ –∫–∞–º–µ—Ä—ã", video_transformer_factory=VideoTransformer):
            results_dict = dict(zip(class_names.values(), results_list_g)) #—Å–ª–æ–≤–∞—Ä—å —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ —Ä–∞–±–æ—Ç—ã –∫–ª–∞—Å—Å: –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
            st.dataframe(classification(results=results_dict, rows=uniform[type_uniform]), use_container_width=True)
    elif detect_mode == '–í–∏–¥–µ–æ–∑–∞–ø–∏—Å—å':
        uploaded_files = st.file_uploader("–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–∏–¥–µ–æ—Ñ–∞–π–ª–æ–≤", ['mp4','mov', 'avi'], accept_multiple_files=True)
        if st.button("–û—Ü–µ–Ω–∏—Ç—å –≤–Ω–µ—à–Ω–∏–π –≤–∏–¥"):
            if uploaded_files:
                rm_temp()
                results_list = [0] * len(class_names) #—Å–ø–∏—Å–æ–∫ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–Ω—ã—Ö –∫–ª–∞—Å—Å–æ–≤ –Ω–∞ –≤—Å–µ—Ö –≤–∏–¥–µ–æ
                tab1, tab2 = st.tabs(["üóÉ", "üìà"])
                for uploaded_file in uploaded_files:
                    temp_file_to_save = os.path.join('./temp',uploaded_file.name)
                    temp_file_result_mp4 = os.path.join("./temp", '{}_out.{}'.format(uploaded_file.name[:uploaded_file.name.rfind(".")],uploaded_file.name[uploaded_file.name.rfind(".") + 1:])) 
                    temp_file_result_h264 = os.path.join("./temp", '{}_out_h264.{}'.format(uploaded_file.name[:uploaded_file.name.rfind(".")],uploaded_file.name[uploaded_file.name.rfind(".") + 1:])) 
                    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ –≤–∏–¥–µ–æ –Ω–∞ –¥–∏—Å–∫ –≤ –∫–∞—á–µ—Å—Ç–≤–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
                    write_bytesio_to_file(temp_file_to_save, uploaded_file)
                    cap = cv2.VideoCapture(temp_file_to_save)
                    # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –≤–∏–¥–µ–æ: —à–∏—Ä–∏–Ω–∞ –∏ –≤—ã—Å–æ—Ç–∞ —Ñ—Ä–µ–π–º–∞, —á–∞—Å—Ç–æ—Ç–∞ –∫–∞–¥—Ä–æ–≤
                    W = int(cap.get(cv2.CAP_PROP_FRAME_WIDTH))
                    H = int(cap.get(cv2.CAP_PROP_FRAME_HEIGHT))
                    FPS = cap.get(cv2.CAP_PROP_FPS)
                    # –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏ –∑–∞–ø–∏—Å–∏ —Ñ—Ä–µ–π–º–æ–≤
                    fourcc_mp4 = cv2.VideoWriter_fourcc(*'MP4V') #–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–π –∫–æ–¥–µ–∫
                    out_mp4 = cv2.VideoWriter(temp_file_result_mp4, fourcc_mp4, FPS, (W, H))
                    while True:
                        ret,frame = cap.read()
                        if not ret: break
                        results = model(frame)[0]
                        result_list = [0] * len(class_names) #—Å–ø–∏—Å–æ–∫ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–Ω—ã—Ö –∫–ª–∞—Å—Å–æ–≤ –Ω–∞ –æ–¥–Ω–æ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏
                        for result in results.boxes.data.tolist():
                                    x1, y1, x2, y2, score, class_id = result
                                    if score > threshold:
                                        result_list[int(class_id)] += 1 #—É–≤–µ–ª–∏—á–∏–≤–∞–µ–º –Ω–∞ 1 –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤ –¥–∞–Ω–Ω–æ–≥–æ –∫–ª–∞—Å—Å–∞
                                        if len(colors)==0: color = (0,255,0)
                                        else: color = tuple(colors[int(class_id)])  
                                        cv2.rectangle(frame, (int(x1), int(y1)), (int(x2), int(y2)), color, 4)
                                        cv2.putText(frame, class_names[int(class_id)]+"-"+str(int(score*100))+"%", (int(x1), int(y1 - 10)),
                                                    cv2.FONT_HERSHEY_COMPLEX, 1.4, color, 3, cv2.LINE_AA)
                        out_mp4.write(frame)
                    out_mp4.release()
                    cap.release()
                    cv2.destroyAllWindows() 
                    #–ü–µ—Ä–µ–∫–æ–¥–∏—Ä–æ–≤–∫–∞ –≤–∏–¥–µ–æ –∏–∑ –∫–æ–¥–µ–∫–∞ mp4 –≤ h264 –∏—Å–ø–æ–ª—å–∑—É—è ffmpeg
                    #–ë–µ–∑ –ø–µ—Ä–µ–∫–æ–¥–∏—Ä–æ–≤–∫–∏ –≤–∏–¥–µ–æ –Ω–µ –ø—Ä–æ–∏–≥—Ä—ã–≤–∞–µ—Ç—Å—è –≤ –±—Ä–∞—É–∑–µ—Ä–µ
                    #–¢—Ä–µ–±—É–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–∫–∏ ffmeg –≤ –û–°
                    subprocess.call(args=f"ffmpeg -y -i {temp_file_result_mp4} -c:v libx264 {temp_file_result_h264}".split(" "))
                    tab1.video(temp_file_result_h264, start_time=0)
                    with open(temp_file_result_mp4, "rb") as file:
                        btn = tab1.download_button(
                        label="–ó–∞–≥—Ä—É–∑–∏—Ç—å",
                        data=file,
                        file_name='{}_out.{}'.format(uploaded_file.name[:uploaded_file.name.rfind(".")],uploaded_file.name[uploaded_file.name.rfind(".") + 1:]),
                        mime="video/mp4")
                    for i in range(len(result_list)):
                        if result_list[i] > results_list[i]: results_list[i] = result_list[i]
                    results_dict = dict(zip(class_names.values(), results_list)) #—Å–ª–æ–≤–∞—Ä—å —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ —Ä–∞–±–æ—Ç—ã –∫–ª–∞—Å—Å: –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
                    tab2.dataframe(classification(results=results_dict, rows=uniform[type_uniform]), use_container_width=True)
    elif detect_mode == '–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ':
        uploaded_files = st.file_uploader("–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω–æ –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π", type=['jpg', 'jpeg', 'png','bmp','dib'], accept_multiple_files=True)
        if st.button("–û—Ü–µ–Ω–∏—Ç—å –≤–Ω–µ—à–Ω–∏–π –≤–∏–¥"):
            if uploaded_files:
                rm_temp()
                tab1, tab2 = st.tabs(["üóÉ", "üìà"])
                results_list = [0] * len(class_names) #—Å–ø–∏—Å–æ–∫ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–Ω—ã—Ö –∫–ª–∞—Å—Å–æ–≤ –Ω–∞ –≤—Å–µ—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è—Ö
                for uploaded_file in uploaded_files:
                    temp_file_to_save = os.path.join('./temp',uploaded_file.name)
                    temp_file_result = os.path.join("./temp", '{}_out.{}'.format(uploaded_file.name[:uploaded_file.name.rfind(".")],uploaded_file.name[uploaded_file.name.rfind(".") + 1:])) 
                    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ –≤–∏–¥–µ–æ –Ω–∞ –¥–∏—Å–∫ –≤ –∫–∞—á–µ—Å—Ç–≤–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ 
                    with open(temp_file_to_save, "wb") as f:
                        f.write(uploaded_file.getbuffer()) 
                    try:
                        img = cv2.imread(temp_file_to_save)
                    except:
                        print(f"file {temp_file_to_save} is not an image *.jpg, *.jpeg, *.png, *.bmp, *.dib")
                        continue 
                    H, W, _ =  img.shape
                    results = model(source=img)[0]
                    result_list = [0] * len(class_names) #—Å–ø–∏—Å–æ–∫ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–Ω—ã—Ö –∫–ª–∞—Å—Å–æ–≤ –Ω–∞ –æ–¥–Ω–æ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏
                    for result in results.boxes.data.tolist():
                        x1, y1, x2, y2, score, class_id = result 
                        if score > threshold:
                            result_list[int(class_id)] += 1 #—É–≤–µ–ª–∏—á–∏–≤–∞–µ–º –Ω–∞ 1 –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤ –¥–∞–Ω–Ω–æ–≥–æ –∫–ª–∞—Å—Å–∞
                            if len(colors)==0: color = (0,255,0)
                            else: color = tuple(colors[int(class_id)])  
                            cv2.rectangle(img, (int(x1), int(y1)), (int(x2), int(y2)), color, 4)
                            cv2.putText(img, class_names[int(class_id)]+"-"+str(int(score*100))+"%", (int(x1), int(y1 - 10)),
                                        cv2.FONT_HERSHEY_COMPLEX, 1.4, color, 3, cv2.LINE_AA)
                    cv2.imwrite(temp_file_result, img) 
                    
                    tab1.image(temp_file_result)
                    for i in range(len(result_list)):
                        if result_list[i] > results_list[i]: results_list[i] = result_list[i]
                results_dict = dict(zip(class_names.values(), results_list)) #—Å–ª–æ–≤–∞—Ä—å —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ —Ä–∞–±–æ—Ç—ã –∫–ª–∞—Å—Å: –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
                tab2.dataframe(classification(results=results_dict, rows=uniform[type_uniform]), use_container_width=True)
                
if __name__=="__main__":
    main()



